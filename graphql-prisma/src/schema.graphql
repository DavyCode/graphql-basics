#import UserOrderByInput, PostOrderByInput, CommentOrderByInput from './generated/prisma.graphql'

type Query {
  users(query: String, skip: Int, first: Int, after: String, orderBy: UserOrderByInput) :[User!]!
  posts(query: String, skip: Int, first: Int, after: String, orderBy: PostOrderByInput) :[Post!]!
  comments(query: String, skip: Int, first: Int, after: String, orderBy: CommentOrderByInput) :[Comment!]!
  post(id: ID!): Post!
  currentUser: User!
  userPosts(query: String, skip: Int, first: Int, after: String, orderBy: PostOrderByInput): [Post!]!
}

type Subscription {
  # updatePost(postId: ID!): PostSubscriptionPayload!
  post: PostSubscriptionPayload!
  comment: CommentSubscriptionPayload!
  userPosts: PostSubscriptionPayload!
}

type Mutation {
  login(data: LoginUserInput!): AuthPayload!
  createUser(data: CreateUserInput!): AuthPayload!
  createPost(data: CreatePostInput!): Post!
  createComment(data: CreateCommentInput!): Comment!

  deleteUser: User!
  deletePost(id: ID!): Post!

  updateUser(id: ID!, data: UpdateUserInput!): User!
  updatePost(id: ID!, data: UpdatePostInput!): Post!
  updateComment(id: ID!, data: UpdateCommentInput!): Comment!
}

type AuthPayload {
  token: String!
  user: User!
}

input LoginUserInput {
  email: String!
  password: String!
}

input CreateUserInput {
  name: String! 
  email: String!
  password: String! 
}

input CreatePostInput {
  title: String!
  published: Boolean!
  body: String!
}

input CreateCommentInput {
  text: String!
  post: ID!
}

input UpdateUserInput {
  name: String 
  email: String
  password: String 
}

input UpdatePostInput {
  title: String!
  published: Boolean
  body: String!
}

input UpdateCommentInput {
  text: String
}

type User {
  id: ID,
  name: String!
  email: String
  password: String!
  posts: [Post!]!
  comments: [Comment!]!
  updatedAt: String!
  createdAt: String!
}

type Post {
  id: ID!
  title: String!
  published: Boolean!
  body: String!
  author: User!
  comments: [Comment!]!
  updatedAt: String!
  createdAt: String!
}

type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
  updatedAt: String!
  createdAt: String!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post!
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
}